from Tkinter import*
import random
import time
import tkMessageBox
global g,main
RoboFinished = True

main = Tk(className = "sorting animation")
canvas = Canvas(main, width = 700, height = 400, bg = "white")
canvas.pack()


class Treasure:
    global treasurePointsList
    treasurePointsList=[]
    def __init__(self,x,y,length,width,colour,canvas,points):
        self.x=x
        self.y=y
        self.length=length
        self.width=width
        self.colour=colour
        self.canvas=canvas
        self.points=points
        self.object=canvas.create_rectangle(self.x,self.y,self.x+self.length,self.y+self.width,fill=self.colour)
        treasurePointsList.append(points)
   
    
def mergeSortAsc(List):
    treasureList.sort(key=lambda x: x.points,reverse=False)
    if len(List) > 1:
        midMA = len(List) // 2
        lHalfMA = List[:midMA]
        rHalfMA = List[midMA:]

        mergeSortAsc(lHalfMA)
        mergeSortAsc(rHalfMA)
        

        aMA = 0
        bMA = 0
        cMA = 0

        while aMA < len(lHalfMA) and bMA < len(rHalfMA):
            if lHalfMA[aMA] < rHalfMA[bMA]:
                List[cMA] = lHalfMA[aMA]                               
                aMA += 1
                
            else:
                List[cMA] = rHalfMA[bMA]
                bMA += 1
            cMA += 1

        while aMA < len(lHalfMA):
            List[cMA] = lHalfMA[aMA]
            aMA += 1
            cMA += 1

        while bMA < len(rHalfMA):
            List[cMA] = rHalfMA[bMA]
            bMA += 1
            cMA += 1

def mergeSortDes(List):
    treasureList.sort(key=lambda x: x.points,reverse=False)
    if len(List) > 1:
        midMD = len(List) // 2
        lHalfMD = List[:midMD]
        rHalfMD = List[midMD:]

        mergeSortDes(lHalfMD)
        mergeSortDes(rHalfMD)
        

        aMD = 0
        bMD = 0
        cMD = 0

        while aMD < len(lHalfMD) and bMD < len(rHalfMD):
            if lHalfMD[aMD] > rHalfMD[bMD]:
                List[cMD] = lHalfMD[aMD]                               
                aMD += 1
                
            else:
                List[cMD] = rHalfMD[bMD]
                bMD += 1
            cMD += 1

        while aMD < len(lHalfMD):
            List[cMD] = lHalfMD[aMD]
            aMD += 1
            cMD += 1

        while bMD < len(rHalfMD):
            List[cMD] = rHalfMD[bMD]
            bMD += 1
            cMD += 1




    
 
            
    
Treasure1 = Treasure(50.0, 160.0, 20.0, 20.0, "red", canvas, 50)
Treasure2 = Treasure(75.0, 160.0, 20.0, 20.0, "yellow", canvas, 1000)
Treasure3 = Treasure(125.0, 160.0, 20.0, 20.0, "blue", canvas, 200)
Treasure4 = Treasure(100.0, 160.0, 20.0, 20.0, "green", canvas, 20)
treasureList=[Treasure1,Treasure2,Treasure3,Treasure4]

print treasurePointsList
mergeSortAsc(treasurePointsList)
print treasurePointsList

print treasurePointsList
mergeSortDes(treasurePointsList)
print treasurePointsList

if RoboFinished != False:
    xAxis = 100
    yAxis = 100
    idx = 0
    main.destroy()
    main = Tk(className = "sorting animation")
    canvas = Canvas(main, width = 300, height = 200, bg = "white")
    canvas.pack()
    for i in range (0, len(treasureList)):
        if Treasure1.points == treasurePointsList[idx]:
            Treasure1 = Treasure(xAxis,yAxis, 20.0, 20.0, "Red", canvas, 50)
            xAxis += 25
            idx += 1
            canvas.update()
            canvas.after(1000)
            
        elif Treasure2.points == treasurePointsList[idx]:
            Treasure2 = Treasure(xAxis,yAxis, 20.0, 20.0, "Yellow", canvas, 1000)
            xAxis += 25
            idx += 1
            canvas.update()
            canvas.after(1000)
            
        elif Treasure3.points == treasurePointsList[idx]:
            Treasure3 = Treasure(xAxis,yAxis, 20.0, 20.0, "Blue", canvas, 200)
            xAxis += 25
            idx += 1
            canvas.update()
            canvas.after(1000)
        elif Treasure4.points == treasurePointsList[idx]:
            Treasure4 = Treasure(xAxis,yAxis, 20.0, 20.0, "Green", canvas, 20)
            xAxis += 25
            idx += 1
            canvas.update()
            canvas.after(1000)
    tkMessageBox.showinfo("Level complete!", "Treasures sorted")        


main.mainloop()

